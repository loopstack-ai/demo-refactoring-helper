include:
  - core/tools/create-chat-message.yaml
  - core/tools/batch-create-messages.yaml
  - core/tools/create-document.yaml
  - core/tools/create-mock.yaml
  - core/tools/debug.yaml
  - examples/examples-workspace.yaml
  - llm/tools/extract-tags.yaml
  - examples/code/refactoring-agent/git-tools.yaml
  - examples/code/refactoring-agent/ai-tools.yaml
  - examples/code/refactoring-agent/documents.yaml

pipelines:
  - name: simple_clone_read
    title: 'Refactoring Agent Pipeline'
    type: root
    workspace: examples
    sequence:
      - workflow: setup_mock_data
      - workflow: clone_repository
      - workflow: read_main_file
      - workflow: analyze_dependencies
      - workflow: suggest_improvements
      - workflow: merge_and_apply_improvements
      - workflow: git_operations
workflows:
  - name: setup_mock_data
    title: 'Setup Mock Configuration'
    type: stateMachine
    transitions:
      - name: create_mock_values
        from: start
        to: end
        call:
          - tool: create_mock
            arguments:
              output: 'src/userService.js'
            exportContext: SOURCE_FILE

          - tool: create_mock
            arguments:
              output: 'https://github.com/TobeyTG/test'
            exportContext: REPO_URL

          - tool: create_mock
            arguments:
              output: 'cloned_repo'
            exportContext: TARGET_DIR

          - tool: create_mock
            arguments:
              output: 'YOUR_KEY'
            exportContext: GITHUB_TOKEN

  - name: clone_repository
    title: 'Clone Repository'
    type: stateMachine
    transitions:
      - name: start_clone
        from: start
        to: cloning
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'Starting clone of {{ context.variables.REPO_URL }}...'

      - name: execute_clone
        from: cloning
        to: clone_completed
        call:
          - tool: git_clone_tool
            arguments:
              repo_url: ${ context.variables.REPO_URL }
              target_dir: ${ context.variables.TARGET_DIR }
            as: CLONE_RESULT

      - name: confirm_clone
        from: clone_completed
        to: end
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'Clone completed. Now reading {{ context.variables.SOURCE_FILE }}...'

  - name: read_main_file
    title: 'Read Main File'
    type: stateMachine
    transitions:
      - name: debug_file_path
        from: start
        to: path_prepared
        call:
          - tool: debug
            arguments:
              value: '{{ context.variables.TARGET_DIR }}/{{ context.variables.SOURCE_FILE }}'

      - name: read_source_file
        from: path_prepared
        to: file_read
        call:
          - tool: read_file_tool
            arguments:
              file_path: '{{ context.variables.TARGET_DIR }}/{{ context.variables.SOURCE_FILE }}'
            as: FILE_RESULT
            exportContext: FILE_RESULT

      - name: display_file_content
        from: file_read
        to: end
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                ## üìÑ Main File Content:
                ```javascript
                {{ FILE_RESULT.content }}
                ```

  - name: analyze_dependencies
    title: 'Analyze Dependencies'
    type: stateMachine
    transitions:
      - name: start_dependency_analysis
        from: start
        to: analyzing
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üîç Analyzing dependencies...'

      - name: run_ai_analysis
        from: analyzing
        to: dependencies_found
        call:
          - tool: analyze_dependencies_ai_tool
            arguments:
              file_content: ${ context.variables.FILE_RESULT.content }
              file_path: '{{ context.variables.TARGET_DIR }}/{{ context.variables.SOURCE_FILE }}'
              document: dependencies_document
            as: DEPENDENCIES

      - name: debug_dependencies
        from: dependencies_found
        to: files_loaded
        call:
          - tool: debug
            arguments:
              value: ${ DEPENDENCIES.object.file_paths }

      - name: read_dependency_files
        from: files_loaded
        to: end
        call:
          - tool: read_multiple_files_tool
            arguments:
              file_paths: ${ DEPENDENCIES.object.file_paths }
            as: OTHER_FILES

          - tool: debug
            arguments:
              value: ${ OTHER_FILES }

          - tool: create_mock
            arguments:
              output: ${ OTHER_FILES }
            exportContext: OTHER_FILES

  - name: suggest_improvements
    title: 'Suggest Code Improvements'
    type: stateMachine
    transitions:
      - name: start_improvement_analysis
        from: start
        to: analyzing_code
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üí° Analyzing code for improvements...'

      - name: run_code_analysis
        from: analyzing_code
        to: improvements_generated
        call:
          - tool: code_improver_agent
            arguments:
              file_content: ${ context.variables.FILE_RESULT.content }
              dependant_file_contents: ${ context.variables.OTHER_FILES.results }
              file_path: '{{ context.variables.TARGET_DIR }}/{{ context.variables.SOURCE_FILE }}'
              target_directory: '{{ context.variables.TARGET_DIR }}'
            as: IMPROVEMENTS

      - name: debug_improvements
        from: improvements_generated
        to: results_displayed
        call:
          - tool: debug
            arguments:
              value: ${ IMPROVEMENTS.object }

      - name: display_improvements_table
        from: results_displayed
        to: waiting_for_approval
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                | File | Line Number | Old Code | Improved Code |
                |------|------------|----------|---------------|
                {{#each IMPROVEMENTS.object.edits }}
                | {{ this.file_name }} | {{ this.line_number }} | `{{ this.old_text }}` | `{{ this.new_text }}` |
                {{/each}}

          - tool: create_document
            arguments:
              document: approval_form
              content:
                improvements: ${ IMPROVEMENTS.object.edits }
                total_improvements: ${ IMPROVEMENTS.object.edits.length }

          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                üìã **Review the improvements above.**

                You can:
                - Delete the Improvements you don't want to apply.
                - The Rest will be applied automatically when you approve.

      - name: approve_improvements
        from: waiting_for_approval
        to: end
        when: manual
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                ‚úÖ **Improvements Approved!**
                Preparing to merge changes...

          - tool: create_mock
            arguments:
              output: ${ transition.payload.improvements }
            exportContext: APPROVED_IMPROVEMENTS

          - tool: create_mock
            arguments:
              output: ${ IMPROVEMENTS.object.files }
            exportContext: IMPROVEMENT_FILES

  - name: merge_and_apply_improvements
    title: 'Merge and Apply Code Improvements'
    type: stateMachine
    transitions:
      - name: start_merge
        from: start
        to: merging
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üîÄ Merging approved improvements...'

      - name: execute_merge
        from: merging
        to: merge_completed
        call:
          - tool: code_merge_agent
            arguments:
              files: ${ context.variables.IMPROVEMENT_FILES }
              edits: ${ context.variables.APPROVED_IMPROVEMENTS }
            as: MERGED_FILES

      - name: debug_merged_results
        from: merge_completed
        to: write_files
        call:
          - tool: debug
            arguments:
              value: ${ MERGED_FILES.object.files }

      - name: write_merged_files
        from: write_files
        to: end
        call:
          - tool: write_improvements_tool
            arguments:
              files: ${ MERGED_FILES.object.files }
            as: WRITE_RESULT

          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                ‚úÖ **Files Updated Successfully!**

                {{#each MERGED_FILES.object.files}}
                üìÅ **{{ this.file_path }}**
                - ‚úÖ Applied {{ this.edits_applied }} improvements
                {{#if this.edits_skipped.length}}
                - ‚ö†Ô∏è Skipped {{ this.edits_skipped.length }} edits:
                {{#each this.edits_skipped}}
                  - Line {{ this.line_number }}: {{ this.reason }}
                {{/each}}
                {{/if}}
                {{/each}}

  - name: git_operations
    title: 'Git Operations - Branch, Commit, Push, PR'
    type: stateMachine
    transitions:
      - name: start_git_operations
        from: start
        to: creating_branch
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üåø Creating new branch for refactoring changes...'

      - name: create_and_checkout_branch
        from: creating_branch
        to: branch_created
        call:
          - tool: git_checkout_branch_tool
            arguments:
              branch_name: 'refactor/code-improvements'
              repo_dir: '{{ context.variables.TARGET_DIR }}'
            as: BRANCH_RESULT

          - tool: create_mock
            arguments:
              output: 'refactor/code-improvements'
            exportContext: BRANCH_NAME

      - name: commit_changes
        from: branch_created
        to: changes_committed
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üìù Committing refactored code changes...'

          - tool: git_commit_tool
            arguments:
              message: |
                refactor: apply AI-suggested code improvements

                Applied {{ context.variables.APPROVED_IMPROVEMENTS.length }} code improvements including:

                Generated by LoopStack Refactoring Agent
              repo_dir: '{{ context.variables.TARGET_DIR }}'
            as: COMMIT_RESULT

      - name: push_branch
        from: changes_committed
        to: branch_pushed
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üöÄ Pushing branch to remote repository...'

          - tool: git_push_tool
            arguments:
              branch_name: '{{ context.variables.BRANCH_NAME }}'
              repo_dir: '{{ context.variables.TARGET_DIR }}'
            as: PUSH_RESULT

      - name: create_pull_request
        from: branch_pushed
        to: end
        call:
          - tool: create_chat_message
            arguments:
              role: assistant
              content: 'üîÉ Creating pull request...'

          - tool: create_pull_request_tool
            arguments:
              title: 'ü§ñ AI Code Refactoring: Automated Improvements'
              description: |
                ## ü§ñ Automated Code Refactoring

                This pull request contains AI-generated code improvements applied by the LoopStack Refactoring Agent.

                ### üìà Improvements Applied: {{ context.variables.APPROVED_IMPROVEMENTS.length }}

                {{#each context.variables.APPROVED_IMPROVEMENTS}}
                - **{{ this.file_name }}** (Line {{ this.line_number }}): {{ this.old_text }} ‚Üí {{ this.new_text }}
                {{/each}}

                Generated automatically by LoopStack Refactoring Agent
              branch_name: ${ context.variables.BRANCH_NAME }
              base_branch: 'main'
              repo_dir: '{{ context.variables.TARGET_DIR }}'
            as: PR_RESULT

          - tool: create_chat_message
            arguments:
              role: assistant
              content: |
                ‚úÖ **Refactoring Pipeline Complete!**

                üåø **Branch:** `{{ context.variables.BRANCH_NAME }}`
                üìù **Committed:** {{ context.variables.APPROVED_IMPROVEMENTS.length }} improvements
                üöÄ **Pushed:** Successfully to remote
                üîÉ **Pull Request:** Created and ready for review

                **Next Steps:**
                1. Review the pull request in your repository
                2. Approve and merge when ready
                3. The refactored code will be integrated into the main branch
