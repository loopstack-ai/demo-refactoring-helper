tools:
  - name: git_clone_tool
    parameters:
      type: object
      properties:
        repo_url:
          type: string
          description: 'Repository URL to clone'
        target_dir:
          type: string
          description: 'Target directory name'
      required:
        - repo_url
        - target_dir
    execute:
      - handler: GitHandler
        arguments:
          action: 'clone'
          repo_url: ${ arguments.repo_url }
          target_dir: ${ arguments.target_dir }

  - name: read_file_tool
    parameters:
      type: object
      properties:
        file_path:
          type: string
          description: 'Path to the file to read'
      required:
        - file_path
    execute:
      - handler: FileReadHandler
        arguments:
          file_name: ${ arguments.file_path }

  - name: read_multiple_files_tool
    parameters:
      type: object
      properties:
        file_paths:
          type: array
          items:
            type: string
      required:
        - file_paths
    execute:
      - handler: BatchFileReadHandler
        arguments:
          file_names: ${ arguments.file_paths }

  - name: analyze_dependencies_ai_tool
    description: 'AI analyzes code and identifies dependency files'
    parameters:
      type: object
      properties:
        file_content:
          type: string
        file_path:
          type: string
        document:
          type: string
      required:
        - file_content
        - file_path
    execute:
      - handler: AiGenerateObjectHandler
        arguments:
          llm:
            provider: openai
            model: gpt-4o
          responseDocument: ${ arguments.document }
          messages:
            - role: system
              content: |
                You are a code dependency analyzer. Given a JavaScript/TypeScript file, identify all import statements and return ONLY file paths that need to be loaded.

                Rules:
                - Only return local file imports (not npm packages)
                - Return file paths relative to the cloned repository directory (e.g., 'cloned_repo/path/to/file.js').
                - Use the provided <FILE_PATH> as the source file's location to resolve relative imports.
                - Return ONLY JSON output (no extra text or commentary).
                - If no dependencies found, return an empty array in `file_path`.

            - role: user
              content: |
                <FILE_PATH>
                {{ arguments.file_path }} 
                <FILE_PATH>

                <FILE_CONTENT>
                {{ arguments.file_content }}
                <FILE_CONTENT>

  - name: code_improver_agent
    description: 'AI agent that analyzes code and suggests improvements as line edits in JSON format'
    parameters:
      type: object
      properties:
        file_content:
          type: string
        dependant_file_contents:
          type: array
          items:
            type: object
            properties:
              content:
                type: string
              containerPath:
                type: string
        file_path:
          type: string
        target_directory:
          type: string
          description: 'Name of the target directory (e.g., "cloned_repo")'
      required:
        - file_content
        - dependant_file_contents
        - file_path
        - target_directory
    execute:
      - handler: AiGenerateObjectHandler
        arguments:
          llm:
            provider: openai
            model: gpt-4o
          responseDocument: improvements_document
          messages:
            - role: system
              content: |
                You are a code improvement agent. Analyze the provided JavaScript/TypeScript code and its dependent files, then suggest specific line edits for improvements such as better variable names, code structure, performance, or best practices for ALL files.

                CRITICAL: Preserve all line breaks and formatting in the new_content field!

                Important guidelines for edits:
                - NEVER use empty strings ("") for old_text or new_text. If you need to represent an empty replacement, use a single space character (" ") instead.
                - Calculate line numbers accurately based on the provided file content, accounting for all line breaks (\n). Line numbers are 1-based and reset to 1 for each new file analyzed.
                - Ensure old_text matches the exact text (including whitespace and indentation) to be replaced.
                - new_text should include proper indentation and line breaks to maintain code structure.
                - PRESERVE original line breaks in new_content - do NOT remove \n characters!
                - To ensure the output can be properly formatted as a Markdown table, replace any pipes (|) in old_text and new_text with escaped pipes (\|), and replace any newlines (\n) with spaces.
                - For file_path, always normalize to start with "{{ arguments.target_directory }}/" regardless of container paths shown in dependent files

                Return ONLY a JSON object with an "edits" array. Each edit should have:
                - file_path: string (RELATIVE path from root directory, e.g., "{{ arguments.target_directory }}/src/userService.js" - NO leading slash)
                  * IMPORTANT: Always use "{{ arguments.target_directory }}/" as the base path regardless of the container path format
                  * If you see paths like "out/{{ arguments.target_directory }}/..." in dependent files, normalize them to "{{ arguments.target_directory }}/..."
                  * Strip any container path prefixes (like "out/") to maintain consistency
                - line_number: integer (1-based, accurately calculated)
                - old_text: string (exact text to replace, never empty - use " " if needed, with pipes escaped and newlines replaced)
                - new_text: string (replacement text, never empty - use " " if needed, with pipes escaped and newlines replaced)
                - file_name: string (the name of the file being edited e.g., "userService.js")
                - new_content: string (the full new content of the file after applying the edit, with proper line breaks preserved!!)

                Path normalization rules:
                - Main file path: Use exactly as provided in FILE_PATH
                - Dependent file paths: Extract the relative path starting from "{{ arguments.target_directory }}/" 
                - Example: "out/{{ arguments.target_directory }}/src/utils/validation.js" â†’ "{{ arguments.target_directory }}/src/utils/validation.js"

                Only suggest edits that are clearly beneficial. If no improvements needed, return empty array.

            - role: user
              content: |
                <FILE_PATH>
                {{ arguments.file_path }}
                </FILE_PATH>

                <FILE_CONTENT>
                {{ arguments.file_content }}
                </FILE_CONTENT>

                <DEPENDENT_FILES>

                {{#each arguments.dependant_file_contents}}
                <PATH>{{ this.containerPath }}</PATH>
                <DEPENDENT_FILE>
                {{ this.content }}
                </DEPENDENT_FILE>
                {{/each}}
                </DEPENDENT_FILES>

  - name: write_improvements_tool
    parameters:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              file_path:
                type: string
              new_content:
                type: string

      required:
        - files
    execute:
      - handler: BatchFileWriteHandler
        arguments:
          files: ${ arguments.files }
